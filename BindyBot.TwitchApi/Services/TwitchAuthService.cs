using BindyBot.TwitchApi.Enums;
using BindyBot.TwitchApi.Models;
using Newtonsoft.Json;
using System.Net;
using System.Web;

namespace BindyBot.TwitchApi.Services;

public class TwitchAuthService
{
    private readonly HttpClient _httpClient;

    public TwitchAuthService(HttpClient httpClient)
    {

        _httpClient = httpClient;
    }

    /// <summary>
    /// Uses an authorization code to generate an access token
    /// </summary>
    /// <param name="clientId">Your app’s registered client ID.</param>
    /// <param name="clientSecret">Your app’s registered client secret.</param>
    /// <param name="code">The OAuth 2.0 authorization code is a 30-character, randomly generated string. Used in the request made to the token endpoint in exchange for an access token.</param>
    /// <param name="redirectUri">Your app’s registered redirect URI.</param>
    /// <returns>A <see cref="AuthCodeResponse"/> object that holds your new auth and refresh tokens.</returns>
    /// <exception cref="ArgumentException">Thrown when any of the required parameters are not valid.</exception>
    /// <exception cref="HttpRequestException"></exception>
    /// <exception cref="JsonException"></exception>
    public async Task<AuthCodeResponse> GetAccessTokenFromCodeAsync(string clientId, string clientSecret, string code, string redirectUri)
    {
        if (string.IsNullOrWhiteSpace(clientId))
            throw new ArgumentException("The clientId is not valid. It is not allowed to be null, empty or filled with whitespaces.");

        if (string.IsNullOrWhiteSpace(clientSecret))
            throw new ArgumentException("The client secret is not valid. It is not allowed be null, empty or filled with whitespaces.");

        if (string.IsNullOrWhiteSpace(code))
            throw new ArgumentException("The code is not valid. It is not allowed to be null, empty or filled with whitespaces.");

        if (string.IsNullOrWhiteSpace(redirectUri))
            throw new ArgumentException("The redirectUri is not valid. It is not allowed to be null, empty or filled with whitespaces.");

        var parameters = new List<KeyValuePair<string, string>>
        {
            new KeyValuePair<string, string>("client_id", clientId),
            new KeyValuePair<string, string>("client_secret", clientSecret),
            new KeyValuePair<string, string>("grant_type", "authorization_code"),
            new KeyValuePair<string, string>("code", code),
            new KeyValuePair<string, string>("redirect_uri", redirectUri)
        };

        using var content = new FormUrlEncodedContent(parameters);

        HttpResponseMessage? response = null;
        AuthCodeResponse authCodeResponse;

        try
        {
            response = await _httpClient.PostAsync("https://id.twitch.tv/oauth2/token", content);
            response.EnsureSuccessStatusCode();

            string responseContent = await response.Content.ReadAsStringAsync();
            authCodeResponse = JsonConvert.DeserializeObject<AuthCodeResponse>(responseContent)!;
        }
        catch (HttpRequestException ex)
            when (response?.StatusCode == HttpStatusCode.BadRequest)
        {
            string responseContent = await response.Content.ReadAsStringAsync();
            BadRequestResponse? badRequestResponse;

            try
            {
                badRequestResponse = JsonConvert.DeserializeObject<BadRequestResponse>(responseContent);
            }
            catch (JsonException)
            {
                throw;
            }

            if (badRequestResponse is not null)
                throw new HttpRequestException(badRequestResponse.Message, ex, HttpStatusCode.BadRequest);

            throw;
        }

        return authCodeResponse;
    }

    /// <summary>
    /// Generates an authorization code URL.
    /// </summary>
    /// <param name="clientId">Your app’s registered client ID.</param>
    /// <param name="redirectUri">Your app’s registered redirect URI.</param>
    /// <param name="scopes">Space-separated list of scopes.</param>
    /// <param name="forceVerify">Specifies whether the user should be re-prompted for authorization. If this is true, the user always is prompted to confirm authorization. This is useful to allow your users to switch Twitch accounts, since there is no way to log users out of the API. Default: false (a given user sees the authorization page for a given set of scopes only the first time through the sequence).</param>
    /// <param name="state">Your unique token, generated by your application. This is an OAuth 2.0 opaque value, used to avoid CSRF attacks. This value is echoed back in the response. We strongly recommend you use this.</param>
    /// <returns>A URL encoded string that can be used to generate a user authorization code.</returns>
    /// <exception cref="ArgumentException">Thrown when any of the required parameters are not valid.</exception>
    public static string GetAuthorizationCodeUrl(string clientId, string redirectUri, IEnumerable<AuthScopes>? scopes = null, string? state = null, bool forceVerify = false)
    {
        if (string.IsNullOrWhiteSpace(clientId))
            throw new ArgumentException("The clientId is not valid. It is not allowed to be null, empty or filled with whitespaces.");

        string? scopesStr = null;
        if (scopes != null)
            foreach (var scope in scopes)
                if (scopesStr == null)
                    scopesStr = AuthScopesConverter.ToString(scope);
                else
                    scopesStr += $"+{AuthScopesConverter.ToString(scope)}";

        return "https://id.twitch.tv/oauth2/authorize?" +
               $"client_id={clientId}&" +
               $"redirect_uri={HttpUtility.UrlEncode(redirectUri)}&" +
               "response_type=code&" +
               $"scope={scopesStr}&" +
               $"state={state}&" +
               $"force_verify={forceVerify.ToString().ToLower()}";
    }
}
